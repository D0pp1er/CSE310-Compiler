Line# 1: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 1: Token <ID> Lexeme array found
Line# 1: Token <LSQUARE> Lexeme [ found
Line# 1: Token <CONST_INT> Lexeme 16 found
Line# 1: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 1: Token <COMMA> Lexeme , found
Line# 1: Token <ID> Lexeme fib_mem found
Line# 1: Token <LSQUARE> Lexeme [ found
Line# 1: Token <CONST_INT> Lexeme 24 found
Line# 1: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 
Line# 1: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON 
unit : var_declaration 
program : unit 
Line# 2: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 2: Token <ID> Lexeme _j found
Line# 2: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 2: Token <ID> Lexeme number1 found
Line# 2: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID 
Line# 2: Token <ID> Lexeme WORD found
Line# 2: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID 
Line# 2: Token <ID> Lexeme word1 found
Line# 2: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID 
var_declaration : type_specifier declaration_list SEMICOLON 
unit : var_declaration 
program : program unit 
Line# 4: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 4: Token <ID> Lexeme fibonacci found
Line# 4: Token <LPAREN> Lexeme ( found
Line# 4: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 4: Token <ID> Lexeme n found
parameter_list : type_specifier ID 
Line# 4: Token <RPAREN> Lexeme ) found
Line# 4: Token <LCURL> Lexeme { found
Line# 5: Token <IF> Lexeme if found
Line# 5: Token <LPAREN> Lexeme ( found
Line# 5: Token <ID> Lexeme fib_mem found
Line# 5: Token <LSQUARE> Lexeme [ found
Line# 5: Token <ID> Lexeme n found
Line# 5: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 5: Token <RELOP> Lexeme != found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 5: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 5: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 5: Token <RETURN> Lexeme return found
Line# 5: Token <ID> Lexeme fib_mem found
Line# 5: Token <LSQUARE> Lexeme [ found
Line# 5: Token <ID> Lexeme n found
Line# 5: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 5: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
Line# 6: Token <IF> Lexeme if found
statement : IF LPAREN expression RPAREN statement 
statements : statement 
Line# 6: Token <LPAREN> Lexeme ( found
Line# 6: Token <ID> Lexeme n found
Line# 6: Token <RELOP> Lexeme == found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 6: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 6: Token <LOGICOP> Lexeme || found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
Line# 6: Token <ID> Lexeme n found
Line# 6: Token <RELOP> Lexeme == found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 6: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 6: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 
expression : logic_expression 
Line# 6: Token <LCURL> Lexeme { found
Line# 7: Token <ID> Lexeme fib_mem found
Line# 7: Token <LSQUARE> Lexeme [ found
Line# 7: Token <ID> Lexeme n found
Line# 7: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 7: Token <ASSIGNOP> Lexeme = found
Line# 7: Token <ID> Lexeme n found
Line# 7: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 8: Token <RETURN> Lexeme return found
Line# 8: Token <ID> Lexeme fib_mem found
Line# 8: Token <LSQUARE> Lexeme [ found
Line# 8: Token <ID> Lexeme n found
Line# 8: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 8: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 9: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 3
	ScopeTable# 2
	1--> <n,ID,,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> 
	6--> <_j,ID,int,,VARIABLE,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
statement : compound_statement 
Line# 10: Token <ID> Lexeme fib_mem found
statement : IF LPAREN expression RPAREN statement 
statements : statements statement 
Line# 10: Token <LSQUARE> Lexeme [ found
Line# 10: Token <ID> Lexeme n found
Line# 10: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 10: Token <ASSIGNOP> Lexeme = found
Line# 10: Token <ID> Lexeme fibonacci found
Line# 10: Token <LPAREN> Lexeme ( found
Line# 10: Token <ID> Lexeme n found
Line# 10: Token <ADDOP> Lexeme - found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 10: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 10: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 10: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 10: Token <ID> Lexeme fibonacci found
Line# 10: Token <LPAREN> Lexeme ( found
Line# 10: Token <ID> Lexeme n found
Line# 10: Token <ADDOP> Lexeme - found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 10: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 10: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 10: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 11: Token <RETURN> Lexeme return found
Line# 11: Token <ID> Lexeme fib_mem found
Line# 11: Token <LSQUARE> Lexeme [ found
Line# 11: Token <ID> Lexeme n found
Line# 11: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 11: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 12: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 2
	1--> <n,ID,,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> 
	6--> <_j,ID,int,,VARIABLE,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 14: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 14: Token <ID> Lexeme factorial found
Line# 14: Token <LPAREN> Lexeme ( found
Line# 14: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 14: Token <ID> Lexeme n found
parameter_list : type_specifier ID 
Line# 14: Token <RPAREN> Lexeme ) found
Line# 14: Token <LCURL> Lexeme { found
Line# 15: Token <IF> Lexeme if found
Line# 15: Token <LPAREN> Lexeme ( found
Line# 15: Token <ID> Lexeme n found
Line# 15: Token <RELOP> Lexeme == found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 15: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 15: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 15: Token <RETURN> Lexeme return found
Line# 15: Token <ID> Lexeme n found
Line# 15: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
Line# 16: Token <INT> Lexeme int found
statement : IF LPAREN expression RPAREN statement 
statements : statement 
type_specifier	: INT 
Line# 16: Token <ID> Lexeme k found
Line# 16: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statements statement 
Line# 17: Token <ID> Lexeme k found
Line# 17: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 17: Token <ID> Lexeme n found
Line# 17: Token <MULOP> Lexeme * found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 17: Token <ID> Lexeme factorial found
Line# 17: Token <LPAREN> Lexeme ( found
Line# 17: Token <ID> Lexeme n found
Line# 17: Token <ADDOP> Lexeme - found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 17: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 17: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : term MULOP unary_expression 
Line# 17: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 18: Token <RETURN> Lexeme return found
Line# 18: Token <ID> Lexeme k found
Line# 18: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 19: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 4
	1--> <n,ID,,,VARIABLE,0> 
	9--> <k,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> 
	6--> <_j,ID,int,,VARIABLE,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 21: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 21: Token <ID> Lexeme power found
Line# 21: Token <LPAREN> Lexeme ( found
Line# 21: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 21: Token <ID> Lexeme a found
parameter_list : type_specifier ID 
Line# 21: Token <COMMA> Lexeme , found
Line# 21: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 21: Token <ID> Lexeme b found
parameter_list  : parameter_list COMMA type_specifier ID 
Line# 21: Token <RPAREN> Lexeme ) found
Line# 21: Token <LCURL> Lexeme { found
Line# 22: Token <IF> Lexeme if found
Line# 22: Token <LPAREN> Lexeme ( found
Line# 22: Token <ID> Lexeme b found
Line# 22: Token <RELOP> Lexeme == found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 22: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 22: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 22: Token <RETURN> Lexeme return found
Line# 22: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 22: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
Line# 23: Token <RETURN> Lexeme return found
statement : IF LPAREN expression RPAREN statement 
statements : statement 
Line# 23: Token <ID> Lexeme a found
Line# 23: Token <MULOP> Lexeme * found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 23: Token <ID> Lexeme power found
Line# 23: Token <LPAREN> Lexeme ( found
Line# 23: Token <ID> Lexeme a found
Line# 23: Token <COMMA> Lexeme , found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 23: Token <ID> Lexeme b found
Line# 23: Token <ADDOP> Lexeme - found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 23: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 23: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : term MULOP unary_expression 
Line# 23: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 24: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 5
	10--> <a,ID,,,VARIABLE,0> 
	11--> <b,ID,,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 26: Token <VOID> Lexeme void found
type_specifier	: VOID 
Line# 26: Token <ID> Lexeme merge1 found
Line# 26: Token <LPAREN> Lexeme ( found
Line# 26: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 26: Token <ID> Lexeme begin found
parameter_list : type_specifier ID 
Line# 26: Token <COMMA> Lexeme , found
Line# 26: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 26: Token <ID> Lexeme mid found
parameter_list  : parameter_list COMMA type_specifier ID 
Line# 26: Token <COMMA> Lexeme , found
Line# 26: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 26: Token <ID> Lexeme end found
parameter_list  : parameter_list COMMA type_specifier ID 
Line# 26: Token <RPAREN> Lexeme ) found
Line# 26: Token <LCURL> Lexeme { found
Line# 27: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 27: Token <ID> Lexeme i found
Line# 27: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 27: Token <ID> Lexeme j found
Line# 27: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 28: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 28: Token <ID> Lexeme temp found
Line# 28: Token <LSQUARE> Lexeme [ found
Line# 28: Token <CONST_INT> Lexeme 16 found
Line# 28: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 28: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statements statement 
Line# 29: Token <ID> Lexeme i found
Line# 29: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 29: Token <ID> Lexeme begin found
Line# 29: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 30: Token <ID> Lexeme j found
Line# 30: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 30: Token <ID> Lexeme mid found
Line# 30: Token <ADDOP> Lexeme + found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 30: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 30: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 31: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 31: Token <ID> Lexeme counter found
Line# 31: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statements statement 
Line# 32: Token <ID> Lexeme counter found
Line# 32: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 32: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 32: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 34: Token <FOR> Lexeme for found
Line# 34: Token <LPAREN> Lexeme ( found
Line# 34: Token <ID> Lexeme counter found
Line# 34: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 34: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 34: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 34: Token <ID> Lexeme counter found
Line# 34: Token <RELOP> Lexeme < found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 34: Token <LPAREN> Lexeme ( found
Line# 34: Token <ID> Lexeme end found
Line# 34: Token <ADDOP> Lexeme - found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 34: Token <ID> Lexeme begin found
Line# 34: Token <ADDOP> Lexeme + found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term 
Line# 34: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 34: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
factor : LPAREN expression RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 34: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 34: Token <ID> Lexeme counter found
Line# 34: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 34: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 34: Token <LCURL> Lexeme { found
Line# 35: Token <IF> Lexeme if found
Line# 35: Token <LPAREN> Lexeme ( found
Line# 35: Token <ID> Lexeme i found
Line# 35: Token <RELOP> Lexeme > found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 35: Token <ID> Lexeme mid found
Line# 35: Token <RPAREN> Lexeme ) found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 35: Token <ID> Lexeme temp found
Line# 35: Token <LSQUARE> Lexeme [ found
Line# 35: Token <ID> Lexeme counter found
Line# 35: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 35: Token <ASSIGNOP> Lexeme = found
Line# 35: Token <ID> Lexeme array found
Line# 35: Token <LSQUARE> Lexeme [ found
Line# 35: Token <ID> Lexeme j found
Line# 35: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 35: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 35: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
Line# 36: Token <ELSE> Lexeme else found
Line# 36: Token <IF> Lexeme if found
Line# 36: Token <LPAREN> Lexeme ( found
Line# 36: Token <ID> Lexeme j found
Line# 36: Token <RELOP> Lexeme > found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 36: Token <ID> Lexeme end found
Line# 36: Token <RPAREN> Lexeme ) found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 36: Token <ID> Lexeme temp found
Line# 36: Token <LSQUARE> Lexeme [ found
Line# 36: Token <ID> Lexeme counter found
Line# 36: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 36: Token <ASSIGNOP> Lexeme = found
Line# 36: Token <ID> Lexeme array found
Line# 36: Token <LSQUARE> Lexeme [ found
Line# 36: Token <ID> Lexeme i found
Line# 36: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 36: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 36: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
Line# 37: Token <ELSE> Lexeme else found
Line# 37: Token <IF> Lexeme if found
Line# 37: Token <LPAREN> Lexeme ( found
Line# 37: Token <ID> Lexeme array found
Line# 37: Token <LSQUARE> Lexeme [ found
Line# 37: Token <ID> Lexeme i found
Line# 37: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 37: Token <RELOP> Lexeme <= found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 37: Token <ID> Lexeme array found
Line# 37: Token <LSQUARE> Lexeme [ found
Line# 37: Token <ID> Lexeme j found
Line# 37: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 37: Token <RPAREN> Lexeme ) found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 37: Token <ID> Lexeme temp found
Line# 37: Token <LSQUARE> Lexeme [ found
Line# 37: Token <ID> Lexeme counter found
Line# 37: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 37: Token <ASSIGNOP> Lexeme = found
Line# 37: Token <ID> Lexeme array found
Line# 37: Token <LSQUARE> Lexeme [ found
Line# 37: Token <ID> Lexeme i found
Line# 37: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 37: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 37: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
Line# 38: Token <ELSE> Lexeme else found
Line# 38: Token <ID> Lexeme temp found
Line# 38: Token <LSQUARE> Lexeme [ found
Line# 38: Token <ID> Lexeme counter found
Line# 38: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 38: Token <ASSIGNOP> Lexeme = found
Line# 38: Token <ID> Lexeme array found
Line# 38: Token <LSQUARE> Lexeme [ found
Line# 38: Token <ID> Lexeme j found
Line# 38: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 38: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 38: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statement : IF LPAREN expression RPAREN statement ELSE statement 
statement : IF LPAREN expression RPAREN statement ELSE statement 
statement : IF LPAREN expression RPAREN statement ELSE statement 
statements : statement 
Line# 39: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 7
	ScopeTable# 6
	1--> <temp,ID,int,16,VARIABLE,0> 
	2--> <mid,ID,,,VARIABLE,0> 
	4--> <begin,ID,,,VARIABLE,0> 
	6--> <counter,ID,int,,VARIABLE,0> 
	7--> <i,ID,int,,VARIABLE,0> 
	8--> <end,ID,,,VARIABLE,0> <j,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 41: Token <FOR> Lexeme for found
Line# 41: Token <LPAREN> Lexeme ( found
Line# 41: Token <ID> Lexeme counter found
Line# 41: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 41: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 41: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 41: Token <ID> Lexeme counter found
Line# 41: Token <RELOP> Lexeme < found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 41: Token <LPAREN> Lexeme ( found
Line# 41: Token <ID> Lexeme end found
Line# 41: Token <ADDOP> Lexeme - found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 41: Token <ID> Lexeme begin found
Line# 41: Token <ADDOP> Lexeme + found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term 
Line# 41: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 41: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
factor : LPAREN expression RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 41: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 41: Token <ID> Lexeme counter found
Line# 41: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 41: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 41: Token <LCURL> Lexeme { found
Line# 42: Token <ID> Lexeme array found
Line# 42: Token <LSQUARE> Lexeme [ found
Line# 42: Token <ID> Lexeme begin found
Line# 42: Token <ADDOP> Lexeme + found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 42: Token <ID> Lexeme counter found
Line# 42: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 42: Token <ASSIGNOP> Lexeme = found
Line# 42: Token <ID> Lexeme temp found
Line# 42: Token <LSQUARE> Lexeme [ found
Line# 42: Token <ID> Lexeme counter found
Line# 42: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 42: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 43: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 8
	ScopeTable# 6
	1--> <temp,ID,int,16,VARIABLE,0> 
	2--> <mid,ID,,,VARIABLE,0> 
	4--> <begin,ID,,,VARIABLE,0> 
	6--> <counter,ID,int,,VARIABLE,0> 
	7--> <i,ID,int,,VARIABLE,0> 
	8--> <end,ID,,,VARIABLE,0> <j,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 44: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 6
	1--> <temp,ID,int,16,VARIABLE,0> 
	2--> <mid,ID,,,VARIABLE,0> 
	4--> <begin,ID,,,VARIABLE,0> 
	6--> <counter,ID,int,,VARIABLE,0> 
	7--> <i,ID,int,,VARIABLE,0> 
	8--> <end,ID,,,VARIABLE,0> <j,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 46: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 46: Token <ID> Lexeme mergeSort found
Line# 46: Token <LPAREN> Lexeme ( found
Line# 46: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 46: Token <ID> Lexeme begin found
parameter_list : type_specifier ID 
Line# 46: Token <COMMA> Lexeme , found
Line# 46: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 46: Token <ID> Lexeme end found
parameter_list  : parameter_list COMMA type_specifier ID 
Line# 46: Token <RPAREN> Lexeme ) found
Line# 46: Token <LCURL> Lexeme { found
Line# 47: Token <IF> Lexeme if found
Line# 47: Token <LPAREN> Lexeme ( found
Line# 47: Token <ID> Lexeme begin found
Line# 47: Token <RELOP> Lexeme >= found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 47: Token <ID> Lexeme end found
Line# 47: Token <RPAREN> Lexeme ) found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 48: Token <RETURN> Lexeme return found
Line# 48: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 48: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
Line# 50: Token <INT> Lexeme int found
statement : IF LPAREN expression RPAREN statement 
statements : statement 
type_specifier	: INT 
Line# 50: Token <ID> Lexeme mid found
Line# 50: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statements statement 
Line# 51: Token <ID> Lexeme mid found
Line# 51: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 51: Token <ID> Lexeme begin found
Line# 51: Token <ADDOP> Lexeme + found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 51: Token <LPAREN> Lexeme ( found
Line# 51: Token <ID> Lexeme end found
Line# 51: Token <ADDOP> Lexeme - found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 51: Token <ID> Lexeme begin found
Line# 51: Token <RPAREN> Lexeme ) found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
factor : LPAREN expression RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 51: Token <MULOP> Lexeme / found
Line# 51: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor 
term : term MULOP unary_expression 
Line# 51: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 52: Token <ID> Lexeme mergeSort found
Line# 52: Token <LPAREN> Lexeme ( found
Line# 52: Token <ID> Lexeme begin found
Line# 52: Token <COMMA> Lexeme , found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 52: Token <ID> Lexeme mid found
Line# 52: Token <RPAREN> Lexeme ) found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 52: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 53: Token <ID> Lexeme mergeSort found
Line# 53: Token <LPAREN> Lexeme ( found
Line# 53: Token <ID> Lexeme mid found
Line# 53: Token <ADDOP> Lexeme + found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 53: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 53: Token <COMMA> Lexeme , found
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 53: Token <ID> Lexeme end found
Line# 53: Token <RPAREN> Lexeme ) found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 53: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 54: Token <ID> Lexeme merge1 found
Line# 54: Token <LPAREN> Lexeme ( found
Line# 54: Token <ID> Lexeme begin found
Line# 54: Token <COMMA> Lexeme , found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 54: Token <ID> Lexeme mid found
Line# 54: Token <COMMA> Lexeme , found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
Line# 54: Token <ID> Lexeme end found
Line# 54: Token <RPAREN> Lexeme ) found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 54: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 55: Token <RETURN> Lexeme return found
Line# 55: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 55: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 56: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 9
	2--> <mid,ID,int,,VARIABLE,0> 
	4--> <begin,ID,,,VARIABLE,0> 
	8--> <end,ID,,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 58: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 58: Token <ID> Lexeme MERGE found
Line# 58: Token <LPAREN> Lexeme ( found
Line# 58: Token <RPAREN> Lexeme ) found
Line# 58: Token <LCURL> Lexeme { found
Line# 59: Token <ID> Lexeme number1 found
Line# 59: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 59: Token <ADDOP> Lexeme - found
Line# 59: Token <CONST_INT> Lexeme 15000 found
factor : CONST_INT 
unary_expression : factor 
unary_expression : ADDOP unary_expression 
term :	unary_expression 
Line# 59: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 60: Token <PRINTLN> Lexeme println found
Line# 60: Token <LPAREN> Lexeme ( found
Line# 60: Token <ID> Lexeme number1 found
Line# 60: Token <RPAREN> Lexeme ) found
Line# 60: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 61: Token <RETURN> Lexeme return found
Line# 61: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 61: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 62: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 10
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 64: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 64: Token <ID> Lexeme loop_test found
Line# 64: Token <LPAREN> Lexeme ( found
Line# 64: Token <RPAREN> Lexeme ) found
Line# 64: Token <LCURL> Lexeme { found
Line# 65: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 65: Token <ID> Lexeme i found
Line# 65: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 66: Token <FOR> Lexeme for found
Line# 66: Token <LPAREN> Lexeme ( found
Line# 66: Token <ID> Lexeme i found
Line# 66: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 66: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 66: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 66: Token <ID> Lexeme i found
Line# 66: Token <RELOP> Lexeme < found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 66: Token <CONST_INT> Lexeme 100 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 66: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 66: Token <ID> Lexeme i found
Line# 66: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 66: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 66: Token <LCURL> Lexeme { found
Line# 67: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 67: Token <ID> Lexeme k found
Line# 67: Token <LSQUARE> Lexeme [ found
Line# 67: Token <CONST_INT> Lexeme 100 found
Line# 67: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 67: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 68: Token <ID> Lexeme k found
Line# 68: Token <LSQUARE> Lexeme [ found
Line# 68: Token <CONST_INT> Lexeme 97 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 68: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 68: Token <ASSIGNOP> Lexeme = found
Line# 68: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 68: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 69: Token <ID> Lexeme k found
Line# 69: Token <LSQUARE> Lexeme [ found
Line# 69: Token <CONST_INT> Lexeme 98 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 69: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 69: Token <ASSIGNOP> Lexeme = found
Line# 69: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 69: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 70: Token <ID> Lexeme k found
Line# 70: Token <LSQUARE> Lexeme [ found
Line# 70: Token <CONST_INT> Lexeme 99 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 70: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 70: Token <ASSIGNOP> Lexeme = found
Line# 70: Token <ID> Lexeme k found
Line# 70: Token <LSQUARE> Lexeme [ found
Line# 70: Token <CONST_INT> Lexeme 98 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 70: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 70: Token <ADDOP> Lexeme + found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 70: Token <ID> Lexeme k found
Line# 70: Token <LSQUARE> Lexeme [ found
Line# 70: Token <CONST_INT> Lexeme 97 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 70: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 70: Token <ADDOP> Lexeme + found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term 
Line# 70: Token <CONST_INT> Lexeme 111 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 70: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 71: Token <IF> Lexeme if found
Line# 71: Token <LPAREN> Lexeme ( found
Line# 71: Token <ID> Lexeme i found
Line# 71: Token <RELOP> Lexeme == found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 71: Token <CONST_INT> Lexeme 97 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 71: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 71: Token <LCURL> Lexeme { found
Line# 72: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 72: Token <ID> Lexeme temp found
Line# 72: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 73: Token <ID> Lexeme temp found
Line# 73: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 73: Token <ID> Lexeme k found
Line# 73: Token <LSQUARE> Lexeme [ found
Line# 73: Token <CONST_INT> Lexeme 99 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 73: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 73: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 74: Token <PRINTLN> Lexeme println found
Line# 74: Token <LPAREN> Lexeme ( found
Line# 74: Token <ID> Lexeme temp found
Line# 74: Token <RPAREN> Lexeme ) found
Line# 74: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 75: Token <RETURN> Lexeme return found
Line# 75: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 75: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 76: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 13
	1--> <temp,ID,int,,VARIABLE,0> 
	ScopeTable# 12
	9--> <k,ID,int,100,VARIABLE,0> 
	ScopeTable# 11
	7--> <i,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
statement : compound_statement 
Line# 77: Token <RCURL> Lexeme } found
statement : IF LPAREN expression RPAREN statement 
statements : statements statement 
compound_statement : LCURL statements RCURL 
	ScopeTable# 12
	9--> <k,ID,int,100,VARIABLE,0> 
	ScopeTable# 11
	7--> <i,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 78: Token <PRINTLN> Lexeme println found
Line# 78: Token <LPAREN> Lexeme ( found
Line# 78: Token <ID> Lexeme i found
Line# 78: Token <RPAREN> Lexeme ) found
Line# 78: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 79: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 11
	7--> <i,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 81: Token <VOID> Lexeme void found
type_specifier	: VOID 
Line# 81: Token <ID> Lexeme main found
Line# 81: Token <LPAREN> Lexeme ( found
Line# 81: Token <RPAREN> Lexeme ) found
Line# 81: Token <LCURL> Lexeme { found
Line# 82: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 82: Token <ID> Lexeme i found
Line# 82: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 82: Token <ID> Lexeme a found
Line# 82: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID 
Line# 82: Token <ID> Lexeme b found
Line# 82: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 83: Token <ID> Lexeme a found
Line# 83: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 83: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 83: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 84: Token <ID> Lexeme b found
Line# 84: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 84: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 84: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 85: Token <ID> Lexeme number1 found
Line# 85: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 85: Token <ID> Lexeme power found
Line# 85: Token <LPAREN> Lexeme ( found
Line# 85: Token <ID> Lexeme a found
Line# 85: Token <COMMA> Lexeme , found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 85: Token <ID> Lexeme b found
Line# 85: Token <RPAREN> Lexeme ) found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 85: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 86: Token <PRINTLN> Lexeme println found
Line# 86: Token <LPAREN> Lexeme ( found
Line# 86: Token <ID> Lexeme number1 found
Line# 86: Token <RPAREN> Lexeme ) found
Line# 86: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 87: Token <ID> Lexeme number1 found
Line# 87: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 87: Token <ID> Lexeme factorial found
Line# 87: Token <LPAREN> Lexeme ( found
Line# 87: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 87: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 87: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 88: Token <PRINTLN> Lexeme println found
Line# 88: Token <LPAREN> Lexeme ( found
Line# 88: Token <ID> Lexeme number1 found
Line# 88: Token <RPAREN> Lexeme ) found
Line# 88: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 89: Token <ID> Lexeme loop_test found
Line# 89: Token <LPAREN> Lexeme ( found
Line# 89: Token <RPAREN> Lexeme ) found
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 89: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 91: Token <FOR> Lexeme for found
Line# 91: Token <LPAREN> Lexeme ( found
Line# 91: Token <ID> Lexeme i found
Line# 91: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 91: Token <CONST_INT> Lexeme 15 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 91: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 91: Token <ID> Lexeme i found
Line# 91: Token <RELOP> Lexeme >= found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 91: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 91: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 91: Token <ID> Lexeme i found
Line# 91: Token <DECOP> Lexeme -- found
variable : ID 
factor : variable DECOP 
unary_expression : factor 
term :	unary_expression 
Line# 91: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 92: Token <ID> Lexeme array found
Line# 92: Token <LSQUARE> Lexeme [ found
Line# 92: Token <ID> Lexeme i found
Line# 92: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 92: Token <ASSIGNOP> Lexeme = found
Line# 92: Token <ADDOP> Lexeme - found
Line# 92: Token <CONST_INT> Lexeme 17000 found
factor : CONST_INT 
unary_expression : factor 
unary_expression : ADDOP unary_expression 
term :	unary_expression 
Line# 92: Token <ADDOP> Lexeme - found
simple_expression : term 
Line# 92: Token <CONST_INT> Lexeme 1000 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 92: Token <MULOP> Lexeme * found
Line# 92: Token <ID> Lexeme i found
Line# 92: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor	: variable 
unary_expression : factor 
term : term MULOP unary_expression 
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 93: Token <ID> Lexeme i found
Line# 93: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 93: Token <CONST_INT> Lexeme 16 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 93: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 94: Token <WHILE> Lexeme while found
Line# 94: Token <LPAREN> Lexeme ( found
Line# 94: Token <ID> Lexeme i found
Line# 94: Token <DECOP> Lexeme -- found
variable : ID 
factor : variable DECOP 
unary_expression : factor 
term :	unary_expression 
Line# 94: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 94: Token <LCURL> Lexeme { found
Line# 95: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 95: Token <ID> Lexeme temp found
Line# 95: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 96: Token <ID> Lexeme temp found
Line# 96: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 96: Token <ID> Lexeme array found
Line# 96: Token <LSQUARE> Lexeme [ found
Line# 96: Token <CONST_INT> Lexeme 15 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 96: Token <ADDOP> Lexeme - found
simple_expression : term 
Line# 96: Token <ID> Lexeme i found
Line# 96: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 96: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 97: Token <PRINTLN> Lexeme println found
Line# 97: Token <LPAREN> Lexeme ( found
Line# 97: Token <ID> Lexeme temp found
Line# 97: Token <RPAREN> Lexeme ) found
Line# 97: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 98: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 15
	1--> <temp,ID,int,,VARIABLE,0> 
	ScopeTable# 14
	7--> <i,ID,int,,VARIABLE,0> 
	10--> <a,ID,int,,VARIABLE,0> 
	11--> <b,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
statement : compound_statement 
statement : WHILE LPAREN expression RPAREN statement 
statements : statements statement 
Line# 100: Token <PRINTLN> Lexeme println found
Line# 100: Token <LPAREN> Lexeme ( found
Line# 100: Token <ID> Lexeme i found
Line# 100: Token <RPAREN> Lexeme ) found
Line# 100: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 101: Token <ID> Lexeme a found
Line# 101: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 101: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 101: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 102: Token <ID> Lexeme b found
Line# 102: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 102: Token <CONST_INT> Lexeme 15 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 102: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 103: Token <ID> Lexeme mergeSort found
Line# 103: Token <LPAREN> Lexeme ( found
Line# 103: Token <ID> Lexeme a found
Line# 103: Token <COMMA> Lexeme , found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 103: Token <ID> Lexeme b found
Line# 103: Token <RPAREN> Lexeme ) found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 103: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 105: Token <FOR> Lexeme for found
Line# 105: Token <LPAREN> Lexeme ( found
Line# 105: Token <ID> Lexeme i found
Line# 105: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 105: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 105: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 105: Token <ID> Lexeme i found
Line# 105: Token <RELOP> Lexeme < found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 105: Token <CONST_INT> Lexeme 16 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 105: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 105: Token <ID> Lexeme i found
Line# 105: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 105: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 105: Token <LCURL> Lexeme { found
Line# 106: Token <IF> Lexeme if found
Line# 106: Token <LPAREN> Lexeme ( found
Line# 106: Token <ID> Lexeme i found
Line# 106: Token <RELOP> Lexeme >= found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 106: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 106: Token <LOGICOP> Lexeme || found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
Line# 106: Token <ID> Lexeme MERGE found
Line# 106: Token <LPAREN> Lexeme ( found
Line# 106: Token <RPAREN> Lexeme ) found
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 106: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 
expression : logic_expression 
Line# 106: Token <LCURL> Lexeme { found
Line# 107: Token <ID> Lexeme WORD found
Line# 107: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 107: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 107: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 108: Token <ID> Lexeme WORD found
Line# 108: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 108: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 108: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 109: Token <ID> Lexeme WORD found
Line# 109: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 109: Token <ID> Lexeme array found
Line# 109: Token <LSQUARE> Lexeme [ found
Line# 109: Token <ID> Lexeme i found
Line# 109: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 109: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 110: Token <PRINTLN> Lexeme println found
Line# 110: Token <LPAREN> Lexeme ( found
Line# 110: Token <ID> Lexeme WORD found
Line# 110: Token <RPAREN> Lexeme ) found
Line# 110: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 111: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 17
	ScopeTable# 16
	ScopeTable# 14
	7--> <i,ID,int,,VARIABLE,0> 
	10--> <a,ID,int,,VARIABLE,0> 
	11--> <b,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
statement : compound_statement 
Line# 112: Token <RCURL> Lexeme } found
statement : IF LPAREN expression RPAREN statement 
statements : statement 
compound_statement : LCURL statements RCURL 
	ScopeTable# 16
	ScopeTable# 14
	7--> <i,ID,int,,VARIABLE,0> 
	10--> <a,ID,int,,VARIABLE,0> 
	11--> <b,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 113: Token <FOR> Lexeme for found
Line# 113: Token <LPAREN> Lexeme ( found
Line# 113: Token <ID> Lexeme i found
Line# 113: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 113: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 113: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 113: Token <ID> Lexeme i found
Line# 113: Token <RELOP> Lexeme < found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 113: Token <CONST_INT> Lexeme 16 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 113: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 113: Token <ID> Lexeme i found
Line# 113: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 113: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 114: Token <IF> Lexeme if found
Line# 114: Token <LPAREN> Lexeme ( found
Line# 114: Token <ID> Lexeme i found
Line# 114: Token <RELOP> Lexeme < found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 114: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 114: Token <LOGICOP> Lexeme && found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
Line# 114: Token <ID> Lexeme MERGE found
Line# 114: Token <LPAREN> Lexeme ( found
Line# 114: Token <RPAREN> Lexeme ) found
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 114: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 
expression : logic_expression 
Line# 114: Token <LCURL> Lexeme { found
Line# 115: Token <ID> Lexeme _j found
Line# 115: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 115: Token <ID> Lexeme array found
Line# 115: Token <LSQUARE> Lexeme [ found
Line# 115: Token <ID> Lexeme i found
Line# 115: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 115: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 116: Token <PRINTLN> Lexeme println found
Line# 116: Token <LPAREN> Lexeme ( found
Line# 116: Token <ID> Lexeme _j found
Line# 116: Token <RPAREN> Lexeme ) found
Line# 116: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 117: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 18
	ScopeTable# 14
	7--> <i,ID,int,,VARIABLE,0> 
	10--> <a,ID,int,,VARIABLE,0> 
	11--> <b,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
statement : compound_statement 
Line# 119: Token <ID> Lexeme word1 found
statement : IF LPAREN expression RPAREN statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 119: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 119: Token <CONST_INT> Lexeme 200 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 119: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 120: Token <PRINTLN> Lexeme println found
Line# 120: Token <LPAREN> Lexeme ( found
Line# 120: Token <ID> Lexeme word1 found
Line# 120: Token <RPAREN> Lexeme ) found
Line# 120: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 121: Token <ID> Lexeme fibonacci found
Line# 121: Token <LPAREN> Lexeme ( found
Line# 121: Token <CONST_INT> Lexeme 23 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 121: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term :	unary_expression 
Line# 121: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 122: Token <FOR> Lexeme for found
Line# 122: Token <LPAREN> Lexeme ( found
Line# 122: Token <ID> Lexeme i found
Line# 122: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 122: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 122: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 122: Token <ID> Lexeme i found
Line# 122: Token <RELOP> Lexeme < found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 122: Token <CONST_INT> Lexeme 24 found
factor : CONST_INT 
unary_expression : factor 
term :	unary_expression 
Line# 122: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 122: Token <ID> Lexeme i found
Line# 122: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 122: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 122: Token <LCURL> Lexeme { found
Line# 123: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 123: Token <ID> Lexeme temp found
Line# 123: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 124: Token <ID> Lexeme temp found
Line# 124: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 124: Token <ID> Lexeme fib_mem found
Line# 124: Token <LSQUARE> Lexeme [ found
Line# 124: Token <ID> Lexeme i found
Line# 124: Token <RSQUARE> Lexeme ] found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 124: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 125: Token <PRINTLN> Lexeme println found
Line# 125: Token <LPAREN> Lexeme ( found
Line# 125: Token <ID> Lexeme temp found
Line# 125: Token <RPAREN> Lexeme ) found
Line# 125: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 126: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 19
	1--> <temp,ID,int,,VARIABLE,0> 
	ScopeTable# 14
	7--> <i,ID,int,,VARIABLE,0> 
	10--> <a,ID,int,,VARIABLE,0> 
	11--> <b,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 127: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 14
	7--> <i,ID,int,,VARIABLE,0> 
	10--> <a,ID,int,,VARIABLE,0> 
	11--> <b,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
start : program 
----------Asm Scopes
	ScopeTable# 20
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
-----------4422 negate is on
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 21
	ScopeTable# 20
	7--> <i,ID,,,VARIABLE,6> 
	10--> <a,ID,,,VARIABLE,4> 
	11--> <b,ID,,,VARIABLE,2> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 22
	ScopeTable# 20
	7--> <i,ID,,,VARIABLE,6> 
	10--> <a,ID,,,VARIABLE,4> 
	11--> <b,ID,,,VARIABLE,2> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 23
	ScopeTable# 22
	ScopeTable# 20
	7--> <i,ID,,,VARIABLE,6> 
	10--> <a,ID,,,VARIABLE,4> 
	11--> <b,ID,,,VARIABLE,2> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 24
	ScopeTable# 20
	7--> <i,ID,,,VARIABLE,6> 
	10--> <a,ID,,,VARIABLE,4> 
	11--> <b,ID,,,VARIABLE,2> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 25
	ScopeTable# 20
	7--> <i,ID,,,VARIABLE,6> 
	10--> <a,ID,,,VARIABLE,4> 
	11--> <b,ID,,,VARIABLE,2> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 26
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 27
	ScopeTable# 26
	7--> <i,ID,,,VARIABLE,2> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 28
	ScopeTable# 27
	9--> <k,ID,,100,VARIABLE,202> 
	ScopeTable# 26
	7--> <i,ID,,,VARIABLE,2> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 29
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
-----------4422 negate is on
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 30
	4--> <begin,,int,,VARIABLE,-4> 
	8--> <end,,int,,VARIABLE,-6> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 31
	2--> <mid,,int,,VARIABLE,-6> 
	4--> <begin,,int,,VARIABLE,-4> 
	8--> <end,,int,,VARIABLE,-8> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 32
	ScopeTable# 31
	1--> <temp,ID,,16,VARIABLE,36> 
	2--> <mid,,int,,VARIABLE,-6> 
	4--> <begin,,int,,VARIABLE,-4> 
	6--> <counter,ID,,,VARIABLE,38> 
	7--> <i,ID,,,VARIABLE,4> 
	8--> <end,,int,,VARIABLE,-8> <j,ID,,,VARIABLE,2> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 33
	ScopeTable# 31
	1--> <temp,ID,,16,VARIABLE,36> 
	2--> <mid,,int,,VARIABLE,-6> 
	4--> <begin,,int,,VARIABLE,-4> 
	6--> <counter,ID,,,VARIABLE,38> 
	7--> <i,ID,,,VARIABLE,4> 
	8--> <end,,int,,VARIABLE,-8> <j,ID,,,VARIABLE,2> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 34
	10--> <a,,int,,VARIABLE,-4> 
	11--> <b,,int,,VARIABLE,-6> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 35
	1--> <n,,int,,VARIABLE,-4> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 36
	1--> <n,,int,,VARIABLE,-4> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
----------Asm Scopes
	ScopeTable# 37
	ScopeTable# 36
	1--> <n,,int,,VARIABLE,-4> 
	ScopeTable# 1
	1--> <word1,ID,int,,VARIABLE,0> <factorial,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	2--> <fibonacci,FUNCTION,int,,FUNCTION_DEFINITION,0> <main,FUNCTION,void,,FUNCTION_DEFINITION,0> 
	3--> <number1,ID,int,,VARIABLE,0> <loop_test,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	4--> <power,FUNCTION,int,,FUNCTION_DEFINITION,0> <merge1,FUNCTION,void,,FUNCTION_DEFINITION,0> <MERGE,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	6--> <_j,ID,int,,VARIABLE,0> <mergeSort,FUNCTION,int,,FUNCTION_DEFINITION,0> 
	10--> <array,ID,int,16,VARIABLE,0> <fib_mem,ID,int,24,VARIABLE,0> <WORD,ID,int,,VARIABLE,0> 
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
------4433 inside term
---------4444 found unary expression
------4433 inside term
------4433 inside term
---------4444 found unary expression
---------4444 found unary expression
