Line# 1: Token <SINGLE LINE COMMENT> Lexeme // int i,j; found
Line# 2: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 2: Token <ID> Lexeme main found
Line# 2: Token <LPAREN> Lexeme ( found
Line# 2: Token <RPAREN> Lexeme ) found
Line# 2: Token <LCURL> Lexeme { found
Line# 4: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 4: Token <ID> Lexeme k found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 4: Token <ID> Lexeme ll found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID 
Line# 4: Token <ID> Lexeme m found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID 
Line# 4: Token <ID> Lexeme n found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID 
Line# 4: Token <ID> Lexeme o found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID 
Line# 4: Token <ID> Lexeme p found
Line# 4: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 6: Token <SINGLE LINE COMMENT> Lexeme // i = 1; found
Line# 7: Token <SINGLE LINE COMMENT> Lexeme // println(i); found
Line# 8: Token <SINGLE LINE COMMENT> Lexeme // j = 5 + 8; found
Line# 9: Token <SINGLE LINE COMMENT> Lexeme // println(j); found
Line# 10: Token <SINGLE LINE COMMENT> Lexeme // k = i + 2*j; found
Line# 11: Token <SINGLE LINE COMMENT> Lexeme // println(k); found
Line# 13: Token <ID> Lexeme m found
Line# 13: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 13: Token <ID> Lexeme k found
Line# 13: Token <MULOP> Lexeme % found
variable : ID 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 13: Token <CONST_INT> Lexeme 9 found
factor : CONST_INT 
unary_expression : factor 
term : term MULOP unary_expression 
Line# 13: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 14: Token <SINGLE LINE COMMENT> Lexeme // println(m); found
Line# 16: Token <SINGLE LINE COMMENT> Lexeme // n = m <= ll; found
Line# 17: Token <SINGLE LINE COMMENT> Lexeme // println(n); found
Line# 19: Token <SINGLE LINE COMMENT> Lexeme // o = i != j; found
Line# 20: Token <SINGLE LINE COMMENT> Lexeme // println(o); found
Line# 22: Token <SINGLE LINE COMMENT> Lexeme // p = n || o; found
Line# 23: Token <SINGLE LINE COMMENT> Lexeme // println(p); found
Line# 25: Token <SINGLE LINE COMMENT> Lexeme // p = n && o; found
Line# 26: Token <SINGLE LINE COMMENT> Lexeme // println(p); found
Line# 28: Token <SINGLE LINE COMMENT> Lexeme // p++; found
Line# 29: Token <SINGLE LINE COMMENT> Lexeme // println(p); found
Line# 31: Token <SINGLE LINE COMMENT> Lexeme // k = -p; found
Line# 32: Token <SINGLE LINE COMMENT> Lexeme // println(k); found
Line# 37: Token <SINGLE LINE COMMENT> Lexeme // return 0; found
Line# 38: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 2
	1--> <n,ID,int,,VARIABLE,0> 
	2--> <o,ID,int,,VARIABLE,0> 
	3--> <p,ID,int,,VARIABLE,0> 
	9--> <k,ID,int,,VARIABLE,0> <ll,ID,int,,VARIABLE,0> 
	11--> <m,ID,int,,VARIABLE,0> 
	ScopeTable# 1
	2--> <main,FUNCTION,int,,FUNCTION_DEFINITION,0> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : unit 
start : program 
----------Asm Scopes
	ScopeTable# 3
	ScopeTable# 1
	2--> <main,FUNCTION,int,,FUNCTION_DEFINITION,0> 
